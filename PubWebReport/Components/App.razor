<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<base href="/" />
	<link rel="stylesheet" href="@Assets["lib/bootstrap/dist/css/bootstrap.min.css"]" />
	<link rel="stylesheet" href="@Assets["app.css"]" />
	<link rel="stylesheet" href="@Assets["PubWebReport.styles.css"]" />
	<ImportMap />
	<link rel="icon" type="image/png" href="favicon.png" />
	<HeadOutlet @rendermode="InteractiveServer" />
	<link href="_content/Syncfusion.Blazor.Themes/bootstrap5.css" rel="stylesheet" />
</head>

<body>
	<Routes @rendermode="InteractiveServer" />
	<script src="_framework/blazor.web.js"></script>
	<script src="_content/Syncfusion.Blazor.Core/scripts/syncfusion-blazor.min.js" type="text/javascript"></script>

	<script type="text/javascript">
		function saveAsFile(filename, bytesBase64) {
			if (navigator.msSaveBlob) {
				//Download document in Edge browser
				var data = window.atob(bytesBase64);
				var bytes = new Uint8Array(data.length);
				for (var i = 0; i < data.length; i++) {
					bytes[i] = data.charCodeAt(i);
				}
				var blob = new Blob([bytes.buffer], { type: "application/octet-stream" });
				navigator.msSaveBlob(blob, filename);
			}
			else {
				var link = document.createElement('a');
				link.download = filename;
				link.href = "data:application/octet-stream;base64," + bytesBase64;
				document.body.appendChild(link); // Needed for Firefox
				link.click();
				document.body.removeChild(link);
			}
		}
	</script>

	<script>
		function setCookie(name, value, hours) {
			const date = new Date();
			date.setTime(date.getTime() + (hours * 60 * 60 * 1000)); // Convert hours to milliseconds
			const expires = "expires=" + date.toUTCString();
			document.cookie = name + "=" + value + ";" + expires + ";path=/";
		}

		function getCookie(name) {
			const cookieName = name + "=";
			const decodedCookie = decodeURIComponent(document.cookie);
			const cookies = decodedCookie.split(';');
			for (let i = 0; i < cookies.length; i++) {
				let cookie = cookies[i].trim();
				if (cookie.startsWith(cookieName)) {
					return cookie.substring(cookieName.length, cookie.length);
				}
			}
			return "";
		}
	</script>
</body>

</html>
