@page "/"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject Microsoft.JSInterop.IJSRuntime JS
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment hostingEnvironment

<PageTitle>Pub Reports</PageTitle>

<style>
	body {
		overflow: hidden;
	}

	.container {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		min-height: 100vh;
		padding: 10px;
		box-sizing: border-box;
	}

	.form-group {
		margin: 10px 0;
	}

	.btn {
		margin: 15px;
	}

	.grid {
		display: grid;
		grid-template-columns: auto auto;
		gap: 10px;
	}
</style>


<div class="container">
	<div class="form-group grid">
		<label for="fromDate">Form Date</label>
		<input type="date" id="fromDate" name="fromDate" value="@fromDate.ToString("yyyy-MM-dd")" @onchange="OnFromDateChange" />

		<label for="toDate">To Date</label>
		<input type="date" id="toDate" name="toDate" value="@toDate.ToString("yyyy-MM-dd")" @onchange="OnToDateChange" />
	</div>

	<div class="form-group grid">
		<label for="fromTime">From Time</label>
		<input type="time" id="fromTime" name="fromTime" value="@fromTime.ToString(@"hh\:mm")" @onchange="OnFromTimeChange" />

		<label for="toTime">To Time</label>
		<input type="time" id="toTime" name="toTime" value="@toTime.ToString(@"hh\:mm")" @onchange="OnToTimeChange" />
	</div>

	<button class="btn btn-primary" type="button" @onclick="SummaryButtonClicked">Summary Report</button>

	<select class="form-select-sm" name="locationSelect" @bind="selectedLocationId">
		@foreach (var location in locations)
		{
			<option value="@location.Id">@location.Name</option>
		}
	</select>

	<button class="btn btn-primary" type="button" @onclick="DetailedButtonClicked">Detailed Report</button>

	<button class="btn btn-primary" type="button" @onclick="ExcelButtonClicked">Excel Report</button>

	<script type="text/javascript">
		function saveAsFile(filename, bytesBase64) {
			if (navigator.msSaveBlob) {
				//Download document in Edge browser
				var data = window.atob(bytesBase64);
				var bytes = new Uint8Array(data.length);
				for (var i = 0; i < data.length; i++) {
					bytes[i] = data.charCodeAt(i);
				}
				var blob = new Blob([bytes.buffer], { type: "application/octet-stream" });
				navigator.msSaveBlob(blob, filename);
			}
			else {
				var link = document.createElement('a');
				link.download = filename;
				link.href = "data:application/octet-stream;base64," + bytesBase64;
				document.body.appendChild(link); // Needed for Firefox
				link.click();
				document.body.removeChild(link);
			}
		}
	</script>
</div>

@code {
	private List<LocationModel> locations = new();
	private TimeSpan fromTime, toTime;
	private DateOnly fromDate, toDate;
	private int selectedLocationId = 1;

	protected override async Task OnInitializedAsync() => await LoadData();

	private async Task LoadData()
	{
		locations = await CommonData.LoadTableDataByStatus<LocationModel>(Table.Location);
		selectedLocationId = locations.FirstOrDefault().Id;

		fromTime = TimeSpan.Parse(await SettingsData.LoadSettingsByKey(SettingsKeys.PubOpenTime));
		toTime = TimeSpan.Parse(await SettingsData.LoadSettingsByKey(SettingsKeys.PubCloseTime));

		if (DateTime.Now.TimeOfDay >= fromTime)
		{
			toDate = DateOnly.FromDateTime(DateTime.Now.Date.AddDays(1));
			fromDate = DateOnly.FromDateTime(DateTime.Now.Date);
		}
		else
		{
			toDate = DateOnly.FromDateTime(DateTime.Now.Date);
			fromDate = DateOnly.FromDateTime(DateTime.Now.Date.AddDays(-1));
		}
	}

	private async Task SummaryButtonClicked()
	{
		if (!ValidateTime())
		{
			await JSRuntime.InvokeVoidAsync("alert", ["Incorrect Time"]);
			return;
		}

		DateTime fromDateTime = new(fromDate.Year, fromDate.Month, fromDate.Day, fromTime.Hours, fromTime.Minutes, 0);
		DateTime toDateTime = new(toDate.Year, toDate.Month, toDate.Day, toTime.Hours, toTime.Minutes, 0);

		MemoryStream ms = await SummaryPrint.PrintSummary(fromDateTime, toDateTime);
		await JS.InvokeVoidAsync("saveAsFile", "SummaryReport.pdf", Convert.ToBase64String(ms.ToArray()));
	}

	private async Task DetailedButtonClicked()
	{
		if (!ValidateTime())
		{
			await JSRuntime.InvokeVoidAsync("alert", ["Incorrect Time"]);
			return;
		}

		DateTime fromDateTime = new(fromDate.Year, fromDate.Month, fromDate.Day, fromTime.Hours, fromTime.Minutes, 0);
		DateTime toDateTime = new(toDate.Year, toDate.Month, toDate.Day, toTime.Hours, toTime.Minutes, 0);

		MemoryStream ms = await DetailPrint.PrintDetail(fromDateTime, toDateTime, selectedLocationId);
		await JS.InvokeVoidAsync("saveAsFile", "DetailedReport.pdf", Convert.ToBase64String(ms.ToArray()));
	}

	private async Task ExcelButtonClicked()
	{
		if (!ValidateTime())
		{
			await JSRuntime.InvokeVoidAsync("alert", ["Incorrect Time"]);
			return;
		}

		DateTime fromDateTime = new(fromDate.Year, fromDate.Month, fromDate.Day, fromTime.Hours, fromTime.Minutes, 0);
		DateTime toDateTime = new(toDate.Year, toDate.Month, toDate.Day, toTime.Hours, toTime.Minutes, 0);

		MemoryStream ms = await Excel.ExcelExport(fromDateTime, toDateTime, selectedLocationId);
		await JS.InvokeVoidAsync("saveAsFile", "ExcelReport.xlsx", Convert.ToBase64String(ms.ToArray()));
	}

	#region Change Events

	private bool ValidateTime()
	{
		if (fromDate > toDate) return false;
		if (fromDate == toDate && fromTime > toTime) return false;

		return true;
	}

	private void OnFromDateChange(ChangeEventArgs e) => fromDate = DateOnly.Parse(e.Value.ToString());

	private void OnToDateChange(ChangeEventArgs e) => toDate = DateOnly.Parse(e.Value.ToString());

	private void OnFromTimeChange(ChangeEventArgs e) => fromTime = TimeSpan.Parse(e.Value.ToString());

	private void OnToTimeChange(ChangeEventArgs e) => toTime = TimeSpan.Parse(e.Value.ToString());

	#endregion
}